{"ast":null,"code":"var _jsxFileName = \"/Users/7k/Desktop/goit-react-hw-02-phonebook/src/components/Phonebook/phonebook.js\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nameExpression = RegExp(\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\");\nconst contactSchema = object({\n  name: string().required().min(2, 'Name must be at least 2 characters').matches(nameExpression, \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"),\n  number: string().required().min(6, 'Number must be at least 6 characters').matches(/^\\+?\\d{1,4}[-.\\s]?\\d{1,3}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/, 'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +')\n});\nexport const ContactForm = _ref => {\n  let {\n    addContact\n  } = _ref;\n\n  const handleFormSubmit = (values, _ref2) => {\n    let {\n      resetForm\n    } = _ref2;\n    addContact(values);\n    resetForm();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      name: '',\n      number: ''\n    },\n    validationSchema: contactSchema,\n    onSubmit: handleFormSubmit,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: css.contact_form_group,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: css.contact_form_label,\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          className: css.contact_form_input,\n          type: \"text\",\n          name: \"name\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          className: css.contact_form_error,\n          name: \"name\",\n          component: \"span\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: css.contact_form_group,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: css.contact_form_label,\n          children: \"Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          className: css.contact_form_input,\n          type: \"tel\",\n          name: \"number\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          className: css.contact_form_error,\n          name: \"number\",\n          component: \"span\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_c = ContactForm;\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["/Users/7k/Desktop/goit-react-hw-02-phonebook/src/components/Phonebook/phonebook.js"],"names":["Formik","Form","Field","ErrorMessage","object","string","PropTypes","nameExpression","RegExp","contactSchema","name","required","min","matches","number","ContactForm","addContact","handleFormSubmit","values","resetForm","css","contact_form_group","contact_form_label","contact_form_input","contact_form_error","propTypes","func","isRequired"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,KAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,cAAc,GAAGC,MAAM,CAC3B,4DAD2B,CAA7B;AAIA,MAAMC,aAAa,GAAGL,MAAM,CAAC;AAC3BM,EAAAA,IAAI,EAAEL,MAAM,GACTM,QADG,GAEHC,GAFG,CAEC,CAFD,EAEI,oCAFJ,EAGHC,OAHG,CAIFN,cAJE,EAKF,wIALE,CADqB;AAQ3BO,EAAAA,MAAM,EAAET,MAAM,GACXM,QADK,GAELC,GAFK,CAED,CAFC,EAEE,sCAFF,EAGLC,OAHK,CAIJ,sEAJI,EAKJ,8FALI;AARmB,CAAD,CAA5B;AAiBA,OAAO,MAAME,WAAW,GAAG,QAAoB;AAAA,MAAnB;AAAEC,IAAAA;AAAF,GAAmB;;AAC7C,QAAMC,gBAAgB,GAAG,CAACC,MAAD,YAA2B;AAAA,QAAlB;AAAEC,MAAAA;AAAF,KAAkB;AAClDH,IAAAA,UAAU,CAACE,MAAD,CAAV;AACAC,IAAAA,SAAS;AACV,GAHD;;AAKA,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAET,MAAAA,IAAI,EAAE,EAAR;AAAYI,MAAAA,MAAM,EAAE;AAApB,KADjB;AAEE,IAAA,gBAAgB,EAAEL,aAFpB;AAGE,IAAA,QAAQ,EAAEQ,gBAHZ;AAAA,2BAKE,QAAC,IAAD;AAAA,8BACE;AAAO,QAAA,SAAS,EAAEG,GAAG,CAACC,kBAAtB;AAAA,gCACE;AAAM,UAAA,SAAS,EAAED,GAAG,CAACE,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AACE,UAAA,SAAS,EAAEF,GAAG,CAACG,kBADjB;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,QAAQ;AAJV;AAAA;AAAA;AAAA;AAAA,gBAFF,eAQE,QAAC,YAAD;AACE,UAAA,SAAS,EAAEH,GAAG,CAACI,kBADjB;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,SAAS,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAeE;AAAO,QAAA,SAAS,EAAEJ,GAAG,CAACC,kBAAtB;AAAA,gCACE;AAAM,UAAA,SAAS,EAAED,GAAG,CAACE,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AACE,UAAA,SAAS,EAAEF,GAAG,CAACG,kBADjB;AAEE,UAAA,IAAI,EAAC,KAFP;AAGE,UAAA,IAAI,EAAC,QAHP;AAIE,UAAA,QAAQ;AAJV;AAAA;AAAA;AAAA;AAAA,gBAFF,eAQE,QAAC,YAAD;AACE,UAAA,SAAS,EAAEH,GAAG,CAACI,kBADjB;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,SAAS,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,eA6BE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD,CA7CM;KAAMT,W;AA+CbA,WAAW,CAACU,SAAZ,GAAwB;AACtBT,EAAAA,UAAU,EAAEV,SAAS,CAACoB,IAAV,CAAeC;AADL,CAAxB","sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport PropTypes from 'prop-types';\n\nconst nameExpression = RegExp(\n  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n);\n\nconst contactSchema = object({\n  name: string()\n    .required()\n    .min(2, 'Name must be at least 2 characters')\n    .matches(\n      nameExpression,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: string()\n    .required()\n    .min(6, 'Number must be at least 6 characters')\n    .matches(\n      /^\\+?\\d{1,4}[-.\\s]?\\d{1,3}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport const ContactForm = ({ addContact }) => {\n  const handleFormSubmit = (values, { resetForm }) => {\n    addContact(values);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={contactSchema}\n      onSubmit={handleFormSubmit}\n    >\n      <Form>\n        <label className={css.contact_form_group}>\n          <span className={css.contact_form_label}>Name</span>\n          <Field\n            className={css.contact_form_input}\n            type=\"text\"\n            name=\"name\"\n            required\n          />\n          <ErrorMessage\n            className={css.contact_form_error}\n            name=\"name\"\n            component=\"span\"\n          />\n        </label>\n        <label className={css.contact_form_group}>\n          <span className={css.contact_form_label}>Number</span>\n          <Field\n            className={css.contact_form_input}\n            type=\"tel\"\n            name=\"number\"\n            required\n          />\n          <ErrorMessage\n            className={css.contact_form_error}\n            name=\"number\"\n            component=\"span\"\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}