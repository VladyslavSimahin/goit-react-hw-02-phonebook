{"ast":null,"code":"var _jsxFileName = \"/Users/7k/Desktop/goit-react-hw-02-phonebook/src/components/Phonebook/phonebook.js\";\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Phonebook = _ref => {\n  let {\n    onAdd\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n      title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onSubmit: (values, actions) => {\n        onAdd({ ...values,\n          id: nanoid()\n        });\n        actions.resetForm();\n      },\n      children: \"Add contact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n_c = Phonebook;\n\nvar _c;\n\n$RefreshReg$(_c, \"Phonebook\");","map":{"version":3,"sources":["/Users/7k/Desktop/goit-react-hw-02-phonebook/src/components/Phonebook/phonebook.js"],"names":["PropTypes","nanoid","Phonebook","onAdd","values","actions","id","resetForm"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,OAAO,MAAMC,SAAS,GAAG,QAAe;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACtC,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,OAAO,EAAC,wHAHV;AAIE,MAAA,KAAK,EAAC,wIAJR;AAKE,MAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,YAHF,eAUE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,QAAQ,EAAE,CAACC,MAAD,EAASC,OAAT,KAAqB;AAC7BF,QAAAA,KAAK,CAAC,EAAE,GAAGC,MAAL;AAAaE,UAAAA,EAAE,EAAEL,MAAM;AAAvB,SAAD,CAAL;AACAI,QAAAA,OAAO,CAACE,SAAR;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAvBM;KAAML,S","sourcesContent":["import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nexport const Phonebook = ({ onAdd }) => {\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <p>Name</p>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <button\n        type=\"submit\"\n        onSubmit={(values, actions) => {\n          onAdd({ ...values, id: nanoid() });\n          actions.resetForm();\n        }}\n      >\n        Add contact\n      </button>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}